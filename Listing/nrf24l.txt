; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\output\nrf24l.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\nrf24l.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\CMSIS -I..\Lib\inc -I..\User -I"E:\Program files\keil-arm\ARM\RV31\INC" -I"E:\Program files\keil-arm\ARM\CMSIS\Include" -I"E:\Program files\keil-arm\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\output\nrf24l.crf ..\BSP\NRF24L.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NRF_Write_Reg PROC
;;;11     */
;;;12     uint8_t NRF_Write_Reg(uint8_t reg, uint8_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;13     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;14     	uint8_t status;
;;;15     	SPI_CE_L();
000006  2101              MOVS     r1,#1
000008  4896              LDR      r0,|L1.612|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;16     	SPI_CSN_L();					  /* 选通器件 */
00000e  2110              MOVS     r1,#0x10
000010  4895              LDR      r0,|L1.616|
000012  f7fffffe          BL       GPIO_ResetBits
;;;17     	status = Spi_RW(reg);  /* 写寄存器地址 */
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       Spi_RW
00001c  4606              MOV      r6,r0
;;;18     	Spi_RW(value);		  /* 写数据 */
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       Spi_RW
;;;19     	SPI_CSN_H();					  /* 禁止该器件 */
000024  2110              MOVS     r1,#0x10
000026  4890              LDR      r0,|L1.616|
000028  f7fffffe          BL       GPIO_SetBits
;;;20       return 	status;
00002c  4630              MOV      r0,r6
;;;21     }
00002e  bd70              POP      {r4-r6,pc}
;;;22     /*
                          ENDP

                  NRF_Read_Reg PROC
;;;26     */
;;;27     uint8_t NRF_Read_Reg(uint8_t reg)
000030  b570              PUSH     {r4-r6,lr}
;;;28     {
000032  4604              MOV      r4,r0
;;;29     	uint8_t reg_val;
;;;30     	SPI_CE_L();
000034  2101              MOVS     r1,#1
000036  488b              LDR      r0,|L1.612|
000038  f7fffffe          BL       GPIO_ResetBits
;;;31     	SPI_CSN_L();					  /* 选通器件 */
00003c  2110              MOVS     r1,#0x10
00003e  488a              LDR      r0,|L1.616|
000040  f7fffffe          BL       GPIO_ResetBits
;;;32     	Spi_RW(reg);			  /* 写寄存器地址 */
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       Spi_RW
;;;33     	reg_val = Spi_RW(0);	  /* 读取该寄存器返回数据 */
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       Spi_RW
000050  4605              MOV      r5,r0
;;;34     	SPI_CSN_H();					  /* 禁止该器件 */
000052  2110              MOVS     r1,#0x10
000054  4884              LDR      r0,|L1.616|
000056  f7fffffe          BL       GPIO_SetBits
;;;35         return 	reg_val;
00005a  4628              MOV      r0,r5
;;;36     }
00005c  bd70              POP      {r4-r6,pc}
;;;37     /*
                          ENDP

                  NRF_Write_Buf PROC
;;;43     */
;;;44     uint8_t NRF_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t uchars)
00005e  e92d41f0          PUSH     {r4-r8,lr}
;;;45     {
000062  4607              MOV      r7,r0
000064  460d              MOV      r5,r1
000066  4616              MOV      r6,r2
;;;46     	uint8_t i;
;;;47     	uint8_t status;
;;;48     	SPI_CE_L();
000068  2101              MOVS     r1,#1
00006a  487e              LDR      r0,|L1.612|
00006c  f7fffffe          BL       GPIO_ResetBits
;;;49     	SPI_CSN_L();				        /* 选通器件 */
000070  2110              MOVS     r1,#0x10
000072  487d              LDR      r0,|L1.616|
000074  f7fffffe          BL       GPIO_ResetBits
;;;50     	status = Spi_RW(reg);	/* 写寄存器地址 */
000078  4638              MOV      r0,r7
00007a  f7fffffe          BL       Spi_RW
00007e  4680              MOV      r8,r0
;;;51     	for(i=0; i<uchars; i++)
000080  2400              MOVS     r4,#0
000082  e004              B        |L1.142|
                  |L1.132|
;;;52     	{
;;;53     		Spi_RW(pBuf[i]);		/* 写数据 */
000084  5d28              LDRB     r0,[r5,r4]
000086  f7fffffe          BL       Spi_RW
00008a  1c60              ADDS     r0,r4,#1              ;51
00008c  b2c4              UXTB     r4,r0                 ;51
                  |L1.142|
00008e  42b4              CMP      r4,r6                 ;51
000090  dbf8              BLT      |L1.132|
;;;54     	}
;;;55     	SPI_CSN_H();						/* 禁止该器件 */
000092  2110              MOVS     r1,#0x10
000094  4874              LDR      r0,|L1.616|
000096  f7fffffe          BL       GPIO_SetBits
;;;56         return 	status;	
00009a  4640              MOV      r0,r8
;;;57     }
00009c  e8bd81f0          POP      {r4-r8,pc}
;;;58     /*
                          ENDP

                  NRF_Read_Buf PROC
;;;62     */
;;;63     uint8_t NRF_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t uchars)
0000a0  e92d41f0          PUSH     {r4-r8,lr}
;;;64     {
0000a4  4607              MOV      r7,r0
0000a6  460d              MOV      r5,r1
0000a8  4616              MOV      r6,r2
;;;65     	uint8_t i;
;;;66     	uint8_t status;
;;;67     	SPI_CE_L();
0000aa  2101              MOVS     r1,#1
0000ac  486d              LDR      r0,|L1.612|
0000ae  f7fffffe          BL       GPIO_ResetBits
;;;68     	SPI_CSN_L();						/* 选通器件 */
0000b2  2110              MOVS     r1,#0x10
0000b4  486c              LDR      r0,|L1.616|
0000b6  f7fffffe          BL       GPIO_ResetBits
;;;69     	status = Spi_RW(reg);	/* 写寄存器地址 */
0000ba  4638              MOV      r0,r7
0000bc  f7fffffe          BL       Spi_RW
0000c0  4680              MOV      r8,r0
;;;70     	for(i=0; i<uchars; i++)
0000c2  2400              MOVS     r4,#0
0000c4  e005              B        |L1.210|
                  |L1.198|
;;;71     	{
;;;72     		pBuf[i] = Spi_RW(0); /* 读取返回数据 */ 	
0000c6  2000              MOVS     r0,#0
0000c8  f7fffffe          BL       Spi_RW
0000cc  5528              STRB     r0,[r5,r4]
0000ce  1c60              ADDS     r0,r4,#1              ;70
0000d0  b2c4              UXTB     r4,r0                 ;70
                  |L1.210|
0000d2  42b4              CMP      r4,r6                 ;70
0000d4  dbf7              BLT      |L1.198|
;;;73     	}
;;;74     	SPI_CSN_H();						/* 禁止该器件 */
0000d6  2110              MOVS     r1,#0x10
0000d8  4863              LDR      r0,|L1.616|
0000da  f7fffffe          BL       GPIO_SetBits
;;;75         return 	status;
0000de  4640              MOV      r0,r8
;;;76     }
0000e0  e8bd81f0          POP      {r4-r8,pc}
;;;77     /*
                          ENDP

                  NRF_TxPacket PROC
;;;81     */
;;;82     void NRF_TxPacket(uint8_t * tx_buf, uint8_t len)
0000e4  b570              PUSH     {r4-r6,lr}
;;;83     {	
0000e6  4604              MOV      r4,r0
0000e8  460d              MOV      r5,r1
;;;84     	SPI_CE_L();		 //StandBy I模式	
0000ea  2101              MOVS     r1,#1
0000ec  485d              LDR      r0,|L1.612|
0000ee  f7fffffe          BL       GPIO_ResetBits
;;;85     	
;;;86     //	NRF_Write_Buf(NRF_WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
;;;87     	NRF_Write_Buf(NRF_WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
0000f2  2205              MOVS     r2,#5
0000f4  495d              LDR      r1,|L1.620|
0000f6  2030              MOVS     r0,#0x30
0000f8  f7fffffe          BL       NRF_Write_Buf
;;;88     	NRF_Write_Buf(WR_TX_PLOAD, tx_buf, len); 			 // 装载数据	
0000fc  462a              MOV      r2,r5
0000fe  4621              MOV      r1,r4
000100  20a0              MOVS     r0,#0xa0
000102  f7fffffe          BL       NRF_Write_Buf
;;;89     	SPI_CE_H();		 //置高CE，激发数据发送
000106  2101              MOVS     r1,#1
000108  4856              LDR      r0,|L1.612|
00010a  f7fffffe          BL       GPIO_SetBits
;;;90     //	time_waitUs(10);
;;;91     //	SPI_CE_L();
;;;92     }
00010e  bd70              POP      {r4-r6,pc}
;;;93     void NRF_TxPacket_AP(uint8_t * tx_buf, uint8_t len)
                          ENDP

                  NRF_TxPacket_AP PROC
000110  b570              PUSH     {r4-r6,lr}
;;;94     {	
000112  4604              MOV      r4,r0
000114  460d              MOV      r5,r1
;;;95     	SPI_CE_L();		 //StandBy I模式	
000116  2101              MOVS     r1,#1
000118  4852              LDR      r0,|L1.612|
00011a  f7fffffe          BL       GPIO_ResetBits
;;;96     	NRF_Write_Buf(0xa8, tx_buf, len); 			 // 装载数据
00011e  462a              MOV      r2,r5
000120  4621              MOV      r1,r4
000122  20a8              MOVS     r0,#0xa8
000124  f7fffffe          BL       NRF_Write_Buf
;;;97     	SPI_CE_H();		 //置高CE
000128  2101              MOVS     r1,#1
00012a  484e              LDR      r0,|L1.612|
00012c  f7fffffe          BL       GPIO_SetBits
;;;98     }
000130  bd70              POP      {r4-r6,pc}
;;;99     u8 Nrf24l01_Check(void)
                          ENDP

                  Nrf24l01_Check PROC
000132  b51c              PUSH     {r2-r4,lr}
;;;100    { 
;;;101    	u8 buf1[5]; 
;;;102    	u8 i; 
;;;103    	/*写入5个字节的地址. */ 
;;;104    	NRF_Write_Buf(NRF_WRITE_REG+TX_ADDR,TX_ADDRESS,5); 
000134  2205              MOVS     r2,#5
000136  494d              LDR      r1,|L1.620|
000138  2030              MOVS     r0,#0x30
00013a  f7fffffe          BL       NRF_Write_Buf
;;;105    	/*读出写入的地址 */ 
;;;106    	NRF_Read_Buf(TX_ADDR,buf1,5); 
00013e  2205              MOVS     r2,#5
000140  4669              MOV      r1,sp
000142  2010              MOVS     r0,#0x10
000144  f7fffffe          BL       NRF_Read_Buf
;;;107    	/*比较*/ 
;;;108    	for(i=0;i<5;i++) 
000148  2400              MOVS     r4,#0
00014a  e008              B        |L1.350|
                  |L1.332|
;;;109    	{ 
;;;110    		if(buf1[i]!=TX_ADDRESS[i]) 
00014c  f81d0004          LDRB     r0,[sp,r4]
000150  4946              LDR      r1,|L1.620|
000152  5d09              LDRB     r1,[r1,r4]
000154  4288              CMP      r0,r1
000156  d000              BEQ      |L1.346|
;;;111    			break; 
000158  e003              B        |L1.354|
                  |L1.346|
00015a  1c60              ADDS     r0,r4,#1              ;108
00015c  b2c4              UXTB     r4,r0                 ;108
                  |L1.350|
00015e  2c05              CMP      r4,#5                 ;108
000160  dbf4              BLT      |L1.332|
                  |L1.354|
000162  bf00              NOP      
;;;112    	} 
;;;113    	if(i==5)
000164  2c05              CMP      r4,#5
000166  d101              BNE      |L1.364|
;;;114    		return SUCCESS ; //MCU与NRF成功连接 
000168  2001              MOVS     r0,#1
                  |L1.362|
;;;115    	else
;;;116    		return ERROR ; //MCU与NRF不正常连接 
;;;117    }
00016a  bd1c              POP      {r2-r4,pc}
                  |L1.364|
00016c  2000              MOVS     r0,#0                 ;116
00016e  e7fc              B        |L1.362|
;;;118    void Nrf24l01_Init(u8 model, u8 ch)
                          ENDP

                  Nrf24l01_Init PROC
000170  b570              PUSH     {r4-r6,lr}
;;;119    {
000172  4604              MOV      r4,r0
000174  460d              MOV      r5,r1
;;;120    	SPI_CE_L();
000176  2101              MOVS     r1,#1
000178  483a              LDR      r0,|L1.612|
00017a  f7fffffe          BL       GPIO_ResetBits
;;;121    	NRF_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,RX_ADDRESS,RX_ADR_WIDTH);	//写RX节点地址 
00017e  2205              MOVS     r2,#5
000180  493b              LDR      r1,|L1.624|
000182  202a              MOVS     r0,#0x2a
000184  f7fffffe          BL       NRF_Write_Buf
;;;122    	NRF_Write_Buf(NRF_WRITE_REG+TX_ADDR,TX_ADDRESS,TX_ADR_WIDTH); 		//写TX节点地址  
000188  2205              MOVS     r2,#5
00018a  4938              LDR      r1,|L1.620|
00018c  2030              MOVS     r0,#0x30
00018e  f7fffffe          BL       NRF_Write_Buf
;;;123    	NRF_Write_Reg(NRF_WRITE_REG+EN_AA,0x01); 													//使能通道0的自动应答 
000192  2101              MOVS     r1,#1
000194  2021              MOVS     r0,#0x21
000196  f7fffffe          BL       NRF_Write_Reg
;;;124    	NRF_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);											//使能通道0的接收地址 
00019a  2101              MOVS     r1,#1
00019c  2022              MOVS     r0,#0x22
00019e  f7fffffe          BL       NRF_Write_Reg
;;;125    	NRF_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0x05);											//设置自动重发间隔时间:500us;最大自动重发次数:10次 
0001a2  2105              MOVS     r1,#5
0001a4  2024              MOVS     r0,#0x24
0001a6  f7fffffe          BL       NRF_Write_Reg
;;;126    	NRF_Write_Reg(NRF_WRITE_REG+RF_CH,40);														//设置RF通道为CHANAL
0001aa  2128              MOVS     r1,#0x28
0001ac  2025              MOVS     r0,#0x25
0001ae  f7fffffe          BL       NRF_Write_Reg
;;;127    	NRF_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f); 												//设置TX发射参数,0db增益,2Mbps,低噪声增益开启
0001b2  210f              MOVS     r1,#0xf
0001b4  2026              MOVS     r0,#0x26
0001b6  f7fffffe          BL       NRF_Write_Reg
;;;128    	//NRF_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x07); 												//设置TX发射参数,0db增益,1Mbps,低噪声增益开启
;;;129    /////////////////////////////////////////////////////////
;;;130    	if(model==1)				//RX
0001ba  2c01              CMP      r4,#1
0001bc  d108              BNE      |L1.464|
;;;131    	{
;;;132    		NRF_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);								//选择通道0的有效数据宽度 
0001be  2120              MOVS     r1,#0x20
0001c0  2031              MOVS     r0,#0x31
0001c2  f7fffffe          BL       NRF_Write_Reg
;;;133    		NRF_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0f);   		 // IRQ收发完成中断开启,16位CRC,主接收
0001c6  210f              MOVS     r1,#0xf
0001c8  2020              MOVS     r0,#0x20
0001ca  f7fffffe          BL       NRF_Write_Reg
0001ce  e041              B        |L1.596|
                  |L1.464|
;;;134    	}
;;;135    	else if(model==2)		//TX
0001d0  2c02              CMP      r4,#2
0001d2  d108              BNE      |L1.486|
;;;136    	{
;;;137    		NRF_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);								//选择通道0的有效数据宽度 
0001d4  2120              MOVS     r1,#0x20
0001d6  2031              MOVS     r0,#0x31
0001d8  f7fffffe          BL       NRF_Write_Reg
;;;138    		NRF_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0e);   		 // IRQ收发完成中断开启,16位CRC,主发送
0001dc  210e              MOVS     r1,#0xe
0001de  2020              MOVS     r0,#0x20
0001e0  f7fffffe          BL       NRF_Write_Reg
0001e4  e036              B        |L1.596|
                  |L1.486|
;;;139    	}
;;;140    	else if(model==3)		//RX2
0001e6  2c03              CMP      r4,#3
0001e8  d11a              BNE      |L1.544|
;;;141    	{
;;;142    		NRF_Write_Reg(FLUSH_TX,0xff);
0001ea  21ff              MOVS     r1,#0xff
0001ec  20e1              MOVS     r0,#0xe1
0001ee  f7fffffe          BL       NRF_Write_Reg
;;;143    		NRF_Write_Reg(FLUSH_RX,0xff);
0001f2  21ff              MOVS     r1,#0xff
0001f4  20e2              MOVS     r0,#0xe2
0001f6  f7fffffe          BL       NRF_Write_Reg
;;;144    		NRF_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0f);   		 // IRQ收发完成中断开启,16位CRC,主接收
0001fa  210f              MOVS     r1,#0xf
0001fc  2020              MOVS     r0,#0x20
0001fe  f7fffffe          BL       NRF_Write_Reg
;;;145    		
;;;146    		Spi_RW(0x50);
000202  2050              MOVS     r0,#0x50
000204  f7fffffe          BL       Spi_RW
;;;147    		Spi_RW(0x73);
000208  2073              MOVS     r0,#0x73
00020a  f7fffffe          BL       Spi_RW
;;;148    		NRF_Write_Reg(NRF_WRITE_REG+0x1c,0x01);
00020e  2101              MOVS     r1,#1
000210  203c              MOVS     r0,#0x3c
000212  f7fffffe          BL       NRF_Write_Reg
;;;149    		NRF_Write_Reg(NRF_WRITE_REG+0x1d,0x06);
000216  2106              MOVS     r1,#6
000218  203d              MOVS     r0,#0x3d
00021a  f7fffffe          BL       NRF_Write_Reg
00021e  e019              B        |L1.596|
                  |L1.544|
;;;150    	}
;;;151    	else								//TX2
;;;152    	{
;;;153    		NRF_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0e);   		 // IRQ收发完成中断开启,16位CRC,主发送
000220  210e              MOVS     r1,#0xe
000222  2020              MOVS     r0,#0x20
000224  f7fffffe          BL       NRF_Write_Reg
;;;154    		NRF_Write_Reg(FLUSH_TX,0xff);
000228  21ff              MOVS     r1,#0xff
00022a  20e1              MOVS     r0,#0xe1
00022c  f7fffffe          BL       NRF_Write_Reg
;;;155    		NRF_Write_Reg(FLUSH_RX,0xff);
000230  21ff              MOVS     r1,#0xff
000232  20e2              MOVS     r0,#0xe2
000234  f7fffffe          BL       NRF_Write_Reg
;;;156    		
;;;157    		Spi_RW(0x50);
000238  2050              MOVS     r0,#0x50
00023a  f7fffffe          BL       Spi_RW
;;;158    		Spi_RW(0x73);
00023e  2073              MOVS     r0,#0x73
000240  f7fffffe          BL       Spi_RW
;;;159    		NRF_Write_Reg(NRF_WRITE_REG+0x1c,0x01);
000244  2101              MOVS     r1,#1
000246  203c              MOVS     r0,#0x3c
000248  f7fffffe          BL       NRF_Write_Reg
;;;160    		NRF_Write_Reg(NRF_WRITE_REG+0x1d,0x06);
00024c  2106              MOVS     r1,#6
00024e  203d              MOVS     r0,#0x3d
000250  f7fffffe          BL       NRF_Write_Reg
                  |L1.596|
;;;161    	}
;;;162    	SPI_CE_H();
000254  2101              MOVS     r1,#1
000256  4803              LDR      r0,|L1.612|
000258  f7fffffe          BL       GPIO_SetBits
;;;163    	time_waitMs(100);
00025c  2064              MOVS     r0,#0x64
00025e  f7fffffe          BL       time_waitMs
;;;164    }
000262  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.612|
                          DCD      0x40011c00
                  |L1.616|
                          DCD      0x40010800
                  |L1.620|
                          DCD      TX_ADDRESS
                  |L1.624|
                          DCD      RX_ADDRESS

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  NRF24L01_RXDATA
                          %        32
                  NRF24L01_TXDATA
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  TX_ADDRESS
000000  e1e2e3e4          DCB      0xe1,0xe2,0xe3,0xe4
000004  e5                DCB      0xe5
                  RX_ADDRESS
000005  e1e2e3            DCB      0xe1,0xe2,0xe3
000008  e4e5              DCB      0xe4,0xe5
