; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\output\stm32f10x_rtc.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f10x_rtc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\CMSIS -I..\Lib\inc -I..\User -I"E:\Program files\keil-arm\ARM\RV31\INC" -I"E:\Program files\keil-arm\ARM\CMSIS\Include" -I"E:\Program files\keil-arm\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\output\stm32f10x_rtc.crf ..\Lib\src\stm32f10x_rtc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  RTC_ITConfig PROC
;;;89       */
;;;90     void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L1.14|
;;;91     {
;;;92       /* Check the parameters */
;;;93       assert_param(IS_RTC_IT(RTC_IT));  
;;;94       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;95       
;;;96       if (NewState != DISABLE)
;;;97       {
;;;98         RTC->CRH |= RTC_IT;
000002  4a4f              LDR      r2,|L1.320|
000004  8812              LDRH     r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b4d              LDR      r3,|L1.320|
00000a  801a              STRH     r2,[r3,#0]
00000c  e004              B        |L1.24|
                  |L1.14|
;;;99       }
;;;100      else
;;;101      {
;;;102        RTC->CRH &= (uint16_t)~RTC_IT;
00000e  4a4c              LDR      r2,|L1.320|
000010  8812              LDRH     r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b4a              LDR      r3,|L1.320|
000016  801a              STRH     r2,[r3,#0]
                  |L1.24|
;;;103      }
;;;104    }
000018  4770              BX       lr
;;;105    
                          ENDP

                  RTC_EnterConfigMode PROC
;;;110      */
;;;111    void RTC_EnterConfigMode(void)
00001a  4849              LDR      r0,|L1.320|
;;;112    {
;;;113      /* Set the CNF flag to enter in the Configuration Mode */
;;;114      RTC->CRL |= RTC_CRL_CNF;
00001c  1d00              ADDS     r0,r0,#4
00001e  8800              LDRH     r0,[r0,#0]
000020  f0400010          ORR      r0,r0,#0x10
000024  4946              LDR      r1,|L1.320|
000026  1d09              ADDS     r1,r1,#4
000028  8008              STRH     r0,[r1,#0]
;;;115    }
00002a  4770              BX       lr
;;;116    
                          ENDP

                  RTC_ExitConfigMode PROC
;;;121      */
;;;122    void RTC_ExitConfigMode(void)
00002c  4844              LDR      r0,|L1.320|
;;;123    {
;;;124      /* Reset the CNF flag to exit from the Configuration Mode */
;;;125      RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
00002e  1d00              ADDS     r0,r0,#4
000030  8800              LDRH     r0,[r0,#0]
000032  f64f71ef          MOV      r1,#0xffef
000036  4008              ANDS     r0,r0,r1
000038  4941              LDR      r1,|L1.320|
00003a  1d09              ADDS     r1,r1,#4
00003c  8008              STRH     r0,[r1,#0]
;;;126    }
00003e  4770              BX       lr
;;;127    
                          ENDP

                  RTC_GetCounter PROC
;;;132      */
;;;133    uint32_t RTC_GetCounter(void)
000040  2100              MOVS     r1,#0
;;;134    {
;;;135      uint16_t tmp = 0;
;;;136      tmp = RTC->CNTL;
000042  483f              LDR      r0,|L1.320|
000044  301c              ADDS     r0,r0,#0x1c
000046  8801              LDRH     r1,[r0,#0]
;;;137      return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
000048  1f00              SUBS     r0,r0,#4
00004a  8800              LDRH     r0,[r0,#0]
00004c  ea414000          ORR      r0,r1,r0,LSL #16
;;;138    }
000050  4770              BX       lr
;;;139    
                          ENDP

                  RTC_SetCounter PROC
;;;144      */
;;;145    void RTC_SetCounter(uint32_t CounterValue)
000052  b500              PUSH     {lr}
;;;146    { 
000054  4602              MOV      r2,r0
;;;147      RTC_EnterConfigMode();
000056  f7fffffe          BL       RTC_EnterConfigMode
;;;148      /* Set RTC COUNTER MSB word */
;;;149      RTC->CNTH = CounterValue >> 16;
00005a  0c10              LSRS     r0,r2,#16
00005c  4938              LDR      r1,|L1.320|
00005e  3118              ADDS     r1,r1,#0x18
000060  8008              STRH     r0,[r1,#0]
;;;150      /* Set RTC COUNTER LSB word */
;;;151      RTC->CNTL = (CounterValue & RTC_LSB_MASK);
000062  1d09              ADDS     r1,r1,#4
000064  800a              STRH     r2,[r1,#0]
;;;152      RTC_ExitConfigMode();
000066  f7fffffe          BL       RTC_ExitConfigMode
;;;153    }
00006a  bd00              POP      {pc}
;;;154    
                          ENDP

                  RTC_SetPrescaler PROC
;;;159      */
;;;160    void RTC_SetPrescaler(uint32_t PrescalerValue)
00006c  b500              PUSH     {lr}
;;;161    {
00006e  4602              MOV      r2,r0
;;;162      /* Check the parameters */
;;;163      assert_param(IS_RTC_PRESCALER(PrescalerValue));
;;;164      
;;;165      RTC_EnterConfigMode();
000070  f7fffffe          BL       RTC_EnterConfigMode
;;;166      /* Set RTC PRESCALER MSB word */
;;;167      RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
000074  f3c24003          UBFX     r0,r2,#16,#4
000078  4931              LDR      r1,|L1.320|
00007a  3108              ADDS     r1,r1,#8
00007c  8008              STRH     r0,[r1,#0]
;;;168      /* Set RTC PRESCALER LSB word */
;;;169      RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
00007e  1d09              ADDS     r1,r1,#4
000080  800a              STRH     r2,[r1,#0]
;;;170      RTC_ExitConfigMode();
000082  f7fffffe          BL       RTC_ExitConfigMode
;;;171    }
000086  bd00              POP      {pc}
;;;172    
                          ENDP

                  RTC_SetAlarm PROC
;;;177      */
;;;178    void RTC_SetAlarm(uint32_t AlarmValue)
000088  b500              PUSH     {lr}
;;;179    {  
00008a  4602              MOV      r2,r0
;;;180      RTC_EnterConfigMode();
00008c  f7fffffe          BL       RTC_EnterConfigMode
;;;181      /* Set the ALARM MSB word */
;;;182      RTC->ALRH = AlarmValue >> 16;
000090  0c10              LSRS     r0,r2,#16
000092  492b              LDR      r1,|L1.320|
000094  3120              ADDS     r1,r1,#0x20
000096  8008              STRH     r0,[r1,#0]
;;;183      /* Set the ALARM LSB word */
;;;184      RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
000098  1d09              ADDS     r1,r1,#4
00009a  800a              STRH     r2,[r1,#0]
;;;185      RTC_ExitConfigMode();
00009c  f7fffffe          BL       RTC_ExitConfigMode
;;;186    }
0000a0  bd00              POP      {pc}
;;;187    
                          ENDP

                  RTC_GetDivider PROC
;;;192      */
;;;193    uint32_t RTC_GetDivider(void)
0000a2  2000              MOVS     r0,#0
;;;194    {
;;;195      uint32_t tmp = 0x00;
;;;196      tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
0000a4  4926              LDR      r1,|L1.320|
0000a6  3110              ADDS     r1,r1,#0x10
0000a8  8809              LDRH     r1,[r1,#0]
0000aa  0709              LSLS     r1,r1,#28
0000ac  0b08              LSRS     r0,r1,#12
;;;197      tmp |= RTC->DIVL;
0000ae  4924              LDR      r1,|L1.320|
0000b0  3114              ADDS     r1,r1,#0x14
0000b2  8809              LDRH     r1,[r1,#0]
0000b4  4308              ORRS     r0,r0,r1
;;;198      return tmp;
;;;199    }
0000b6  4770              BX       lr
;;;200    
                          ENDP

                  RTC_WaitForLastTask PROC
;;;206      */
;;;207    void RTC_WaitForLastTask(void)
0000b8  bf00              NOP      
                  |L1.186|
;;;208    {
;;;209      /* Loop until RTOFF flag is set */
;;;210      while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
0000ba  4821              LDR      r0,|L1.320|
0000bc  1d00              ADDS     r0,r0,#4
0000be  8800              LDRH     r0,[r0,#0]
0000c0  f0100f20          TST      r0,#0x20
0000c4  d0f9              BEQ      |L1.186|
;;;211      {
;;;212      }
;;;213    }
0000c6  4770              BX       lr
;;;214    
                          ENDP

                  RTC_WaitForSynchro PROC
;;;222      */
;;;223    void RTC_WaitForSynchro(void)
0000c8  481d              LDR      r0,|L1.320|
;;;224    {
;;;225      /* Clear RSF flag */
;;;226      RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
0000ca  1d00              ADDS     r0,r0,#4
0000cc  8800              LDRH     r0,[r0,#0]
0000ce  f64f71f7          MOV      r1,#0xfff7
0000d2  4008              ANDS     r0,r0,r1
0000d4  491a              LDR      r1,|L1.320|
0000d6  1d09              ADDS     r1,r1,#4
0000d8  8008              STRH     r0,[r1,#0]
;;;227      /* Loop until RSF flag is set */
;;;228      while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
0000da  bf00              NOP      
                  |L1.220|
0000dc  4818              LDR      r0,|L1.320|
0000de  1d00              ADDS     r0,r0,#4
0000e0  8800              LDRH     r0,[r0,#0]
0000e2  f0100f08          TST      r0,#8
0000e6  d0f9              BEQ      |L1.220|
;;;229      {
;;;230      }
;;;231    }
0000e8  4770              BX       lr
;;;232    
                          ENDP

                  RTC_GetFlagStatus PROC
;;;243      */
;;;244    FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
0000ea  4601              MOV      r1,r0
;;;245    {
;;;246      FlagStatus bitstatus = RESET;
0000ec  2000              MOVS     r0,#0
;;;247      
;;;248      /* Check the parameters */
;;;249      assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
;;;250      
;;;251      if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
0000ee  4a14              LDR      r2,|L1.320|
0000f0  1d12              ADDS     r2,r2,#4
0000f2  8812              LDRH     r2,[r2,#0]
0000f4  420a              TST      r2,r1
0000f6  d001              BEQ      |L1.252|
;;;252      {
;;;253        bitstatus = SET;
0000f8  2001              MOVS     r0,#1
0000fa  e000              B        |L1.254|
                  |L1.252|
;;;254      }
;;;255      else
;;;256      {
;;;257        bitstatus = RESET;
0000fc  2000              MOVS     r0,#0
                  |L1.254|
;;;258      }
;;;259      return bitstatus;
;;;260    }
0000fe  4770              BX       lr
;;;261    
                          ENDP

                  RTC_ClearFlag PROC
;;;272      */
;;;273    void RTC_ClearFlag(uint16_t RTC_FLAG)
000100  490f              LDR      r1,|L1.320|
;;;274    {
;;;275      /* Check the parameters */
;;;276      assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
;;;277        
;;;278      /* Clear the corresponding RTC flag */
;;;279      RTC->CRL &= (uint16_t)~RTC_FLAG;
000102  1d09              ADDS     r1,r1,#4
000104  8809              LDRH     r1,[r1,#0]
000106  4381              BICS     r1,r1,r0
000108  4a0d              LDR      r2,|L1.320|
00010a  1d12              ADDS     r2,r2,#4
00010c  8011              STRH     r1,[r2,#0]
;;;280    }
00010e  4770              BX       lr
;;;281    
                          ENDP

                  RTC_GetITStatus PROC
;;;290      */
;;;291    ITStatus RTC_GetITStatus(uint16_t RTC_IT)
000110  4601              MOV      r1,r0
;;;292    {
;;;293      ITStatus bitstatus = RESET;
000112  2000              MOVS     r0,#0
;;;294      /* Check the parameters */
;;;295      assert_param(IS_RTC_GET_IT(RTC_IT)); 
;;;296      
;;;297      bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
000114  4a0a              LDR      r2,|L1.320|
000116  1d12              ADDS     r2,r2,#4
000118  8812              LDRH     r2,[r2,#0]
00011a  400a              ANDS     r2,r2,r1
00011c  b2d0              UXTB     r0,r2
;;;298      if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
00011e  4a08              LDR      r2,|L1.320|
000120  8812              LDRH     r2,[r2,#0]
000122  420a              TST      r2,r1
000124  d002              BEQ      |L1.300|
000126  b108              CBZ      r0,|L1.300|
;;;299      {
;;;300        bitstatus = SET;
000128  2001              MOVS     r0,#1
00012a  e000              B        |L1.302|
                  |L1.300|
;;;301      }
;;;302      else
;;;303      {
;;;304        bitstatus = RESET;
00012c  2000              MOVS     r0,#0
                  |L1.302|
;;;305      }
;;;306      return bitstatus;
;;;307    }
00012e  4770              BX       lr
;;;308    
                          ENDP

                  RTC_ClearITPendingBit PROC
;;;317      */
;;;318    void RTC_ClearITPendingBit(uint16_t RTC_IT)
000130  4903              LDR      r1,|L1.320|
;;;319    {
;;;320      /* Check the parameters */
;;;321      assert_param(IS_RTC_IT(RTC_IT));  
;;;322      
;;;323      /* Clear the corresponding RTC pending bit */
;;;324      RTC->CRL &= (uint16_t)~RTC_IT;
000132  1d09              ADDS     r1,r1,#4
000134  8809              LDRH     r1,[r1,#0]
000136  4381              BICS     r1,r1,r0
000138  4a01              LDR      r2,|L1.320|
00013a  1d12              ADDS     r2,r2,#4
00013c  8011              STRH     r1,[r2,#0]
;;;325    }
00013e  4770              BX       lr
;;;326    
                          ENDP

                  |L1.320|
                          DCD      0x40002800
