; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\output\adc.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\adc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\CMSIS -I..\Lib\inc -I..\User -I"E:\Program files\keil-arm\ARM\RV31\INC" -I"E:\Program files\keil-arm\ARM\CMSIS\Include" -I"E:\Program files\keil-arm\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\output\adc.crf ..\BSP\ADC.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ADC1_GPIO_Config PROC
;;;4      
;;;5      static void ADC1_GPIO_Config(void)
000000  b508              PUSH     {r3,lr}
;;;6      {
;;;7      	GPIO_InitTypeDef GPIO_InitStructure;
;;;8      
;;;9        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;10     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  f44f7001          MOV      r0,#0x204
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;11     
;;;12       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
000014  2001              MOVS     r0,#1
000016  f8ad0000          STRH     r0,[sp,#0]
;;;13       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
00001a  2000              MOVS     r0,#0
00001c  f88d0003          STRB     r0,[sp,#3]
;;;14       GPIO_Init(GPIOA, &GPIO_InitStructure);				
000020  4669              MOV      r1,sp
000022  4837              LDR      r0,|L1.256|
000024  f7fffffe          BL       GPIO_Init
;;;15     }
000028  bd08              POP      {r3,pc}
;;;16     
                          ENDP

                  ADC1_Mode_Config PROC
;;;17     static void ADC1_Mode_Config(void)
00002a  b500              PUSH     {lr}
;;;18     {
00002c  b091              SUB      sp,sp,#0x44
;;;19     	DMA_InitTypeDef DMA_InitStructure;
;;;20     	ADC_InitTypeDef ADC_InitStructure;
;;;21     
;;;22     	/* DMA channel1 configuration */
;;;23       DMA_DeInit(DMA1_Channel1);
00002e  4835              LDR      r0,|L1.260|
000030  f7fffffe          BL       DMA_DeInit
;;;24       DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;
000034  4834              LDR      r0,|L1.264|
000036  9006              STR      r0,[sp,#0x18]
;;;25       DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&ADC_ConvertedValue;
000038  4834              LDR      r0,|L1.268|
00003a  9007              STR      r0,[sp,#0x1c]
;;;26       DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
00003c  2000              MOVS     r0,#0
00003e  9008              STR      r0,[sp,#0x20]
;;;27       DMA_InitStructure.DMA_BufferSize = 1;
000040  2001              MOVS     r0,#1
000042  9009              STR      r0,[sp,#0x24]
;;;28       DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000044  2000              MOVS     r0,#0
000046  900a              STR      r0,[sp,#0x28]
;;;29       DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
000048  900b              STR      r0,[sp,#0x2c]
;;;30       DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
00004a  f44f7080          MOV      r0,#0x100
00004e  900c              STR      r0,[sp,#0x30]
;;;31       DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
000050  0080              LSLS     r0,r0,#2
000052  900d              STR      r0,[sp,#0x34]
;;;32       DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
000054  2020              MOVS     r0,#0x20
000056  900e              STR      r0,[sp,#0x38]
;;;33       DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000058  0200              LSLS     r0,r0,#8
00005a  900f              STR      r0,[sp,#0x3c]
;;;34       DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
00005c  2000              MOVS     r0,#0
00005e  9010              STR      r0,[sp,#0x40]
;;;35       DMA_Init(DMA1_Channel1, &DMA_InitStructure);
000060  a906              ADD      r1,sp,#0x18
000062  4828              LDR      r0,|L1.260|
000064  f7fffffe          BL       DMA_Init
;;;36       
;;;37       /* Enable DMA channel1 */
;;;38       DMA_Cmd(DMA1_Channel1, ENABLE);
000068  2101              MOVS     r1,#1
00006a  4826              LDR      r0,|L1.260|
00006c  f7fffffe          BL       DMA_Cmd
;;;39          
;;;40        /* ADC1 configuration */
;;;41       ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;	//独立模式 每个ADC独立工作
000070  2000              MOVS     r0,#0
000072  9001              STR      r0,[sp,#4]
;;;42       ADC_InitStructure.ADC_ScanConvMode = ENABLE;				 //使用扫描模式  scan位设置
000074  2001              MOVS     r0,#1
000076  f88d0008          STRB     r0,[sp,#8]
;;;43       ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;	// cont位设置 连续转换模式
00007a  f88d0009          STRB     r0,[sp,#9]
;;;44       ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;	;//EXTSEL 选择启动规则通道组转换的外部事件 设置成有软件控制
00007e  f44f2060          MOV      r0,#0xe0000
000082  9003              STR      r0,[sp,#0xc]
;;;45       ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;	//数据对齐 由软件置位和清楚   这里设置成右对齐
000084  2000              MOVS     r0,#0
000086  9004              STR      r0,[sp,#0x10]
;;;46       ADC_InitStructure.ADC_NbrOfChannel = 1;		//规则通道序列长度 这些位由软件定义在规则通道转换序列中的通道数目 1个转换 指定由多少个通道被转换
000088  2001              MOVS     r0,#1
00008a  f88d0014          STRB     r0,[sp,#0x14]
;;;47       ADC_Init(ADC1, &ADC_InitStructure);
00008e  a901              ADD      r1,sp,#4
000090  481d              LDR      r0,|L1.264|
000092  384c              SUBS     r0,r0,#0x4c
000094  f7fffffe          BL       ADC_Init
;;;48     
;;;49       /* ADC1 regular channel11 configuration */ 
;;;50       ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_55Cycles5);	//转换时间是55.5个周期
000098  2305              MOVS     r3,#5
00009a  2201              MOVS     r2,#1
00009c  2100              MOVS     r1,#0
00009e  481a              LDR      r0,|L1.264|
0000a0  384c              SUBS     r0,r0,#0x4c
0000a2  f7fffffe          BL       ADC_RegularChannelConfig
;;;51     
;;;52       /* Enable ADC1 DMA */
;;;53       ADC_DMACmd(ADC1, ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  4817              LDR      r0,|L1.264|
0000aa  384c              SUBS     r0,r0,#0x4c
0000ac  f7fffffe          BL       ADC_DMACmd
;;;54       
;;;55       /* Enable ADC1 */
;;;56       ADC_Cmd(ADC1, ENABLE);
0000b0  2101              MOVS     r1,#1
0000b2  4815              LDR      r0,|L1.264|
0000b4  384c              SUBS     r0,r0,#0x4c
0000b6  f7fffffe          BL       ADC_Cmd
;;;57     
;;;58       /* Enable ADC1 reset calibaration register */   
;;;59       ADC_ResetCalibration(ADC1);
0000ba  4813              LDR      r0,|L1.264|
0000bc  384c              SUBS     r0,r0,#0x4c
0000be  f7fffffe          BL       ADC_ResetCalibration
;;;60       /* Check the end of ADC1 reset calibration register */
;;;61       while(ADC_GetResetCalibrationStatus(ADC1));
0000c2  bf00              NOP      
                  |L1.196|
0000c4  4810              LDR      r0,|L1.264|
0000c6  384c              SUBS     r0,r0,#0x4c
0000c8  f7fffffe          BL       ADC_GetResetCalibrationStatus
0000cc  2800              CMP      r0,#0
0000ce  d1f9              BNE      |L1.196|
;;;62     
;;;63       /* Start ADC1 calibaration */
;;;64       ADC_StartCalibration(ADC1);
0000d0  480d              LDR      r0,|L1.264|
0000d2  384c              SUBS     r0,r0,#0x4c
0000d4  f7fffffe          BL       ADC_StartCalibration
;;;65       /* Check the end of ADC1 calibration */
;;;66       while(ADC_GetCalibrationStatus(ADC1));
0000d8  bf00              NOP      
                  |L1.218|
0000da  480b              LDR      r0,|L1.264|
0000dc  384c              SUBS     r0,r0,#0x4c
0000de  f7fffffe          BL       ADC_GetCalibrationStatus
0000e2  2800              CMP      r0,#0
0000e4  d1f9              BNE      |L1.218|
;;;67          
;;;68       /* Start ADC1 Software Conversion */ 
;;;69       ADC_SoftwareStartConvCmd(ADC1, ENABLE);
0000e6  2101              MOVS     r1,#1
0000e8  4807              LDR      r0,|L1.264|
0000ea  384c              SUBS     r0,r0,#0x4c
0000ec  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;70     }
0000f0  b011              ADD      sp,sp,#0x44
0000f2  bd00              POP      {pc}
;;;71     
                          ENDP

                  ADC1_Init PROC
;;;78      */
;;;79     void ADC1_Init(void)
0000f4  b510              PUSH     {r4,lr}
;;;80     {
;;;81     	ADC1_GPIO_Config();
0000f6  f7fffffe          BL       ADC1_GPIO_Config
;;;82     	ADC1_Mode_Config();
0000fa  f7fffffe          BL       ADC1_Mode_Config
;;;83     }
0000fe  bd10              POP      {r4,pc}
                          ENDP

                  |L1.256|
                          DCD      0x40010800
                  |L1.260|
                          DCD      0x40020008
                  |L1.264|
                          DCD      0x4001244c
                  |L1.268|
                          DCD      ADC_ConvertedValue

                          AREA ||.data||, DATA, ALIGN=1

                  ADC_ConvertedValue
000000  0000              DCB      0x00,0x00
