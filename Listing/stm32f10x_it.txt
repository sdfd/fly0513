; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\output\stm32f10x_it.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\CMSIS -I..\Lib\inc -I..\User -I"E:\Program Files\keil for arm4.7\ARM\RV31\INC" -I"E:\Program Files\keil for arm4.7\ARM\CMSIS\Include" -I"E:\Program Files\keil for arm4.7\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\output\stm32f10x_it.crf ..\User\stm32f10x_it.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  NMI_Handler PROC
;;;49       */
;;;50     void NMI_Handler(void)
000000  4770              BX       lr
;;;51     {
;;;52     }
;;;53     
                          ENDP

                  HardFault_Handler PROC
;;;58       */
;;;59     void HardFault_Handler(void)
000002  bf00              NOP      
                  |L1.4|
;;;60     {
;;;61       /* Go to infinite loop when Hard Fault exception occurs */
;;;62       while (1)
000004  e7fe              B        |L1.4|
;;;63       {
;;;64       }
;;;65     }
;;;66     
                          ENDP

                  MemManage_Handler PROC
;;;71       */
;;;72     void MemManage_Handler(void)
000006  bf00              NOP      
                  |L1.8|
;;;73     {
;;;74       /* Go to infinite loop when Memory Manage exception occurs */
;;;75       while (1)
000008  e7fe              B        |L1.8|
;;;76       {
;;;77       }
;;;78     }
;;;79     
                          ENDP

                  BusFault_Handler PROC
;;;84       */
;;;85     void BusFault_Handler(void)
00000a  bf00              NOP      
                  |L1.12|
;;;86     {
;;;87       /* Go to infinite loop when Bus Fault exception occurs */
;;;88       while (1)
00000c  e7fe              B        |L1.12|
;;;89       {
;;;90       }
;;;91     }
;;;92     
                          ENDP

                  UsageFault_Handler PROC
;;;97       */
;;;98     void UsageFault_Handler(void)
00000e  bf00              NOP      
                  |L1.16|
;;;99     {
;;;100      /* Go to infinite loop when Usage Fault exception occurs */
;;;101      while (1)
000010  e7fe              B        |L1.16|
;;;102      {
;;;103      }
;;;104    }
;;;105    
                          ENDP

                  SVC_Handler PROC
;;;110      */
;;;111    void SVC_Handler(void)
000012  4770              BX       lr
;;;112    {
;;;113    }
;;;114    
                          ENDP

                  DebugMon_Handler PROC
;;;119      */
;;;120    void DebugMon_Handler(void)
000014  4770              BX       lr
;;;121    {
;;;122    }
;;;123    
                          ENDP

                  PendSV_Handler PROC
;;;128      */
;;;129    void PendSV_Handler(void)
000016  4770              BX       lr
;;;130    {
;;;131    }
;;;132    
                          ENDP

                  USART1_IRQHandler PROC
;;;148    
;;;149    void USART1_IRQHandler(void)
000018  b510              PUSH     {r4,lr}
;;;150    {
;;;151    	u8 c;
;;;152    	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
00001a  f2405125          MOV      r1,#0x525
00001e  488c              LDR      r0,|L1.592|
000020  f7fffffe          BL       USART_GetITStatus
000024  b138              CBZ      r0,|L1.54|
;;;153    	{ 	
;;;154    	    c=USART1->DR;
000026  488a              LDR      r0,|L1.592|
000028  1d00              ADDS     r0,r0,#4
00002a  8800              LDRH     r0,[r0,#0]
00002c  b2c4              UXTB     r4,r0
;;;155    	  	printf("%c",c);    //将接受到的数据直接返回打印
00002e  4621              MOV      r1,r4
000030  a088              ADR      r0,|L1.596|
000032  f7fffffe          BL       __2printf
                  |L1.54|
;;;156    	} 
;;;157    	 
;;;158    }
000036  bd10              POP      {r4,pc}
;;;159    void DMA1_Channel5_IRQHandler(void)
                          ENDP

                  DMA1_Channel5_IRQHandler PROC
000038  e92d4ff0          PUSH     {r4-r11,lr}
;;;160    {	
00003c  b085              SUB      sp,sp,#0x14
;;;161    	uint16_t i,j;
;;;162    	uint8_t sum=0;
00003e  f04f0a00          MOV      r10,#0
;;;163    	uint32_t now_time;
;;;164    	T_float_angle Pre_Angle;
;;;165    //判断是否为DMA发送完成中断
;;;166    //	printf("123\n");
;;;167    	DMA_ITConfig(DMA1_Channel5,DMA_IT_TC,DISABLE);
000042  2200              MOVS     r2,#0
000044  2102              MOVS     r1,#2
000046  4884              LDR      r0,|L1.600|
000048  f7fffffe          BL       DMA_ITConfig
;;;168    	now_time = time_nowMs();
00004c  f7fffffe          BL       time_nowMs
000050  4683              MOV      r11,r0
;;;169    	Dlt_Tim = now_time - Pre_Tim;
000052  4882              LDR      r0,|L1.604|
000054  6800              LDR      r0,[r0,#0]  ; Pre_Tim
000056  ebab0000          SUB      r0,r11,r0
00005a  4981              LDR      r1,|L1.608|
00005c  6008              STR      r0,[r1,#0]  ; Dlt_Tim
;;;170    	Pre_Tim = now_time;
00005e  487f              LDR      r0,|L1.604|
000060  f8c0b000          STR      r11,[r0,#0]  ; Pre_Tim
;;;171    	Pre_Angle=Att_Angle;
000064  4a7f              LDR      r2,|L1.612|
000066  ca07              LDM      r2,{r0-r2}
000068  ab02              ADD      r3,sp,#8
00006a  c307              STM      r3!,{r0-r2}
;;;172    //	DMA_Cmd(DMA1_Channel6,DISABLE);
;;;173       if(DMA_GetFlagStatus(DMA1_FLAG_TC5)==SET) 
00006c  f44f3000          MOV      r0,#0x20000
000070  f7fffffe          BL       DMA_GetFlagStatus
000074  2801              CMP      r0,#1
000076  d17d              BNE      |L1.372|
;;;174      {  
;;;175    		for(i=0;i<(READBUFF_SIZE-11);i++)
000078  2400              MOVS     r4,#0
00007a  e0b2              B        |L1.482|
                  |L1.124|
;;;176    		{
;;;177    			if((ReadBuffer[i]==0x55)&&(ReadBuffer[i+1]==0x53))
00007c  487a              LDR      r0,|L1.616|
00007e  5d00              LDRB     r0,[r0,r4]
000080  2855              CMP      r0,#0x55
                  |L1.130|
000082  d178              BNE      |L1.374|
000084  4978              LDR      r1,|L1.616|
000086  1c60              ADDS     r0,r4,#1
000088  5c08              LDRB     r0,[r1,r0]
00008a  2853              CMP      r0,#0x53
00008c  d1f9              BNE      |L1.130|
;;;178    			{
;;;179    				for(j=0;j<10;j++)
00008e  f04f0900          MOV      r9,#0
000092  e00a              B        |L1.170|
                  |L1.148|
;;;180    				{
;;;181    					sum += ReadBuffer[i+j];
000094  eb040009          ADD      r0,r4,r9
000098  4973              LDR      r1,|L1.616|
00009a  5c08              LDRB     r0,[r1,r0]
00009c  4450              ADD      r0,r0,r10
00009e  f0000aff          AND      r10,r0,#0xff
0000a2  f1090001          ADD      r0,r9,#1              ;179
0000a6  fa1ff980          UXTH     r9,r0                 ;179
                  |L1.170|
0000aa  f1b90f0a          CMP      r9,#0xa               ;179
0000ae  dbf1              BLT      |L1.148|
;;;182    //					printf("%X ",ReadBuffer[i+j]);
;;;183    				}
;;;184    //				printf("%X ",ReadBuffer[i+j+1]);
;;;185    //				printf("%d\n",sum);
;;;186    				if(ReadBuffer[i+10]==sum)
0000b0  496d              LDR      r1,|L1.616|
0000b2  f104000a          ADD      r0,r4,#0xa
0000b6  5c08              LDRB     r0,[r1,r0]
0000b8  4550              CMP      r0,r10
0000ba  d1e2              BNE      |L1.130|
;;;187    				{
;;;188    					Att_Angle.rol=((int16_t)((ReadBuffer[i+3]<<8)|ReadBuffer[i+2]))/32768.0*180;
0000bc  460a              MOV      r2,r1
0000be  1ca1              ADDS     r1,r4,#2
0000c0  5c52              LDRB     r2,[r2,r1]
0000c2  4b69              LDR      r3,|L1.616|
0000c4  1ce1              ADDS     r1,r4,#3
0000c6  5c59              LDRB     r1,[r3,r1]
0000c8  ea422101          ORR      r1,r2,r1,LSL #8
0000cc  b208              SXTH     r0,r1
0000ce  f7fffffe          BL       __aeabi_i2d
0000d2  2200              MOVS     r2,#0
0000d4  4b65              LDR      r3,|L1.620|
0000d6  e9cd0100          STRD     r0,r1,[sp,#0]
0000da  f7fffffe          BL       __aeabi_ddiv
0000de  4607              MOV      r7,r0
0000e0  2200              MOVS     r2,#0
0000e2  4b63              LDR      r3,|L1.624|
0000e4  f7fffffe          BL       __aeabi_dmul
0000e8  4605              MOV      r5,r0
0000ea  f7fffffe          BL       __aeabi_d2f
0000ee  495d              LDR      r1,|L1.612|
0000f0  6008              STR      r0,[r1,#0]  ; Att_Angle
;;;189    					Att_Angle.pit=((int16_t)((ReadBuffer[i+5]<<8)|ReadBuffer[i+4]))/32768.0*180;
0000f2  4a5d              LDR      r2,|L1.616|
0000f4  1d21              ADDS     r1,r4,#4
0000f6  5c52              LDRB     r2,[r2,r1]
0000f8  4b5b              LDR      r3,|L1.616|
0000fa  1d61              ADDS     r1,r4,#5
0000fc  5c59              LDRB     r1,[r3,r1]
0000fe  ea422101          ORR      r1,r2,r1,LSL #8
000102  b208              SXTH     r0,r1
000104  f7fffffe          BL       __aeabi_i2d
000108  4607              MOV      r7,r0
00010a  2200              MOVS     r2,#0
00010c  4b57              LDR      r3,|L1.620|
00010e  f7fffffe          BL       __aeabi_ddiv
000112  4605              MOV      r5,r0
000114  2200              MOVS     r2,#0
000116  4b56              LDR      r3,|L1.624|
000118  f7fffffe          BL       __aeabi_dmul
00011c  e9cd0100          STRD     r0,r1,[sp,#0]
000120  f7fffffe          BL       __aeabi_d2f
000124  494f              LDR      r1,|L1.612|
000126  6048              STR      r0,[r1,#4]  ; Att_Angle
;;;190    					Att_Angle.yaw=((int16_t)((ReadBuffer[i+7]<<8)|ReadBuffer[i+6]))/32768.0*180;
000128  4a4f              LDR      r2,|L1.616|
00012a  1da1              ADDS     r1,r4,#6
00012c  5c52              LDRB     r2,[r2,r1]
00012e  4b4e              LDR      r3,|L1.616|
000130  1de1              ADDS     r1,r4,#7
000132  5c59              LDRB     r1,[r3,r1]
000134  ea422101          ORR      r1,r2,r1,LSL #8
000138  b208              SXTH     r0,r1
00013a  f7fffffe          BL       __aeabi_i2d
00013e  2200              MOVS     r2,#0
000140  4b4a              LDR      r3,|L1.620|
000142  e9cd0100          STRD     r0,r1,[sp,#0]
000146  f7fffffe          BL       __aeabi_ddiv
00014a  4607              MOV      r7,r0
00014c  2200              MOVS     r2,#0
00014e  4b48              LDR      r3,|L1.624|
000150  f7fffffe          BL       __aeabi_dmul
000154  4605              MOV      r5,r0
000156  f7fffffe          BL       __aeabi_d2f
00015a  4942              LDR      r1,|L1.612|
00015c  6088              STR      r0,[r1,#8]  ; Att_Angle
;;;191    //					printf("Roll=%4.3f,Pitch=%4.3f,Yaw=%4.3f\n",Roll,Pitch,Yaw);
;;;192    					Gyr.Y=((float)(Att_Angle.rol-Pre_Angle.rol)/(float)Dlt_Tim);
00015e  4840              LDR      r0,|L1.608|
000160  6800              LDR      r0,[r0,#0]  ; Dlt_Tim
000162  f7fffffe          BL       __aeabi_ui2f
000166  4606              MOV      r6,r0
000168  4a3e              LDR      r2,|L1.612|
00016a  9902              LDR      r1,[sp,#8]
00016c  6810              LDR      r0,[r2,#0]  ; Att_Angle
00016e  f7fffffe          BL       __aeabi_fsub
000172  e001              B        |L1.376|
                  |L1.372|
000174  e042              B        |L1.508|
                  |L1.374|
000176  e032              B        |L1.478|
                  |L1.376|
000178  4607              MOV      r7,r0
00017a  4631              MOV      r1,r6
00017c  f7fffffe          BL       __aeabi_fdiv
000180  4605              MOV      r5,r0
000182  f7fffffe          BL       __aeabi_f2iz
000186  b200              SXTH     r0,r0
000188  493a              LDR      r1,|L1.628|
00018a  8048              STRH     r0,[r1,#2]
;;;193    					Gyr.X=((float)(Att_Angle.pit-Pre_Angle.pit)/(float)Dlt_Tim);
00018c  4834              LDR      r0,|L1.608|
00018e  6800              LDR      r0,[r0,#0]  ; Dlt_Tim
000190  f7fffffe          BL       __aeabi_ui2f
000194  4606              MOV      r6,r0
000196  4a33              LDR      r2,|L1.612|
000198  9903              LDR      r1,[sp,#0xc]
00019a  6850              LDR      r0,[r2,#4]  ; Att_Angle
00019c  f7fffffe          BL       __aeabi_fsub
0001a0  4607              MOV      r7,r0
0001a2  4631              MOV      r1,r6
0001a4  f7fffffe          BL       __aeabi_fdiv
0001a8  4605              MOV      r5,r0
0001aa  f7fffffe          BL       __aeabi_f2iz
0001ae  b200              SXTH     r0,r0
0001b0  4930              LDR      r1,|L1.628|
0001b2  8008              STRH     r0,[r1,#0]
;;;194    					Gyr.Z=((float)(Att_Angle.yaw-Pre_Angle.yaw)/(float)Dlt_Tim);
0001b4  482a              LDR      r0,|L1.608|
0001b6  6800              LDR      r0,[r0,#0]  ; Dlt_Tim
0001b8  f7fffffe          BL       __aeabi_ui2f
0001bc  4606              MOV      r6,r0
0001be  4a29              LDR      r2,|L1.612|
0001c0  9904              LDR      r1,[sp,#0x10]
0001c2  6890              LDR      r0,[r2,#8]  ; Att_Angle
0001c4  f7fffffe          BL       __aeabi_fsub
0001c8  4607              MOV      r7,r0
0001ca  4631              MOV      r1,r6
0001cc  f7fffffe          BL       __aeabi_fdiv
0001d0  4605              MOV      r5,r0
0001d2  f7fffffe          BL       __aeabi_f2iz
0001d6  b200              SXTH     r0,r0
0001d8  4926              LDR      r1,|L1.628|
0001da  8088              STRH     r0,[r1,#4]
;;;195    					goto L1;
0001dc  e005              B        |L1.490|
                  |L1.478|
0001de  1c60              ADDS     r0,r4,#1              ;175
0001e0  b284              UXTH     r4,r0                 ;175
                  |L1.482|
0001e2  2c0c              CMP      r4,#0xc               ;175
0001e4  f6ffaf4a          BLT      |L1.124|
;;;196    				}
;;;197    			}
;;;198    		}
;;;199    //		DMA_ClearFlag(DMA1_FLAG_TC6);
;;;200    L1:		
0001e8  bf00              NOP      
                  |L1.490|
;;;201    //		DMA1_Channel6->CPAR=(u32)USART2_DR_Base;
;;;202    //		DMA1_Channel6->CMAR=(u32)ReadBuffer;
;;;203    //		DMA1_Channel6->CNDTR=READBUFF_SIZE;
;;;204    //		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
;;;205    //		USART2_Config();
;;;206    		
;;;207    		DMA_ClearFlag(DMA1_FLAG_TC5);
0001ea  f44f3000          MOV      r0,#0x20000
0001ee  f7fffffe          BL       DMA_ClearFlag
;;;208    //		DMA_Config();
;;;209    //		DMA_Cmd(DMA1_Channel6,ENABLE);
;;;210    		DMA_ITConfig(DMA1_Channel5,DMA_IT_TC,ENABLE);
0001f2  2201              MOVS     r2,#1
0001f4  2102              MOVS     r1,#2
0001f6  4818              LDR      r0,|L1.600|
0001f8  f7fffffe          BL       DMA_ITConfig
                  |L1.508|
;;;211    //		USART_DMACmd(USART2,USART_DMAReq_Rx,ENABLE);
;;;212    		
;;;213    	}	
;;;214    }
0001fc  b005              ADD      sp,sp,#0x14
0001fe  e8bd8ff0          POP      {r4-r11,pc}
;;;215    
                          ENDP

                  TIM4_IRQHandler PROC
;;;216    void TIM4_IRQHandler(void)		//0.5ms中断一次
000202  b510              PUSH     {r4,lr}
;;;217    {	
;;;218    	Tim4_Pwm_In_Irq();
000204  f7fffffe          BL       Tim4_Pwm_In_Irq
;;;219    }
000208  bd10              POP      {r4,pc}
;;;220    /**
                          ENDP

                  TIM2_IRQHandler PROC
;;;231      */ 
;;;232    void TIM2_IRQHandler(void)		//0.5ms中断一次
00020a  b510              PUSH     {r4,lr}
;;;233    {	
;;;234    	static u8 ms1_cnt=0;
;;;235    	if(TIM2->SR & TIM_IT_Update)		//if ( TIM_GetITStatus(TIM3 , TIM_IT_Update) != RESET ) 
00020c  f04f4080          MOV      r0,#0x40000000
000210  8a00              LDRH     r0,[r0,#0x10]
000212  f0100f01          TST      r0,#1
000216  d019              BEQ      |L1.588|
;;;236    	{     
;;;237    		TIM2->SR = ~TIM_FLAG_Update;//TIM_ClearITPendingBit(TIM3 , TIM_FLAG_Update);   //清除中断标志
000218  f64f70fe          MOV      r0,#0xfffe
00021c  f04f4180          MOV      r1,#0x40000000
000220  8208              STRH     r0,[r1,#0x10]
;;;238    		TIM2_IRQCNT++;		
000222  4815              LDR      r0,|L1.632|
000224  6800              LDR      r0,[r0,#0]  ; TIM2_IRQCNT
000226  1c40              ADDS     r0,r0,#1
000228  4913              LDR      r1,|L1.632|
00022a  6008              STR      r0,[r1,#0]  ; TIM2_IRQCNT
;;;239    		ms1_cnt++;
00022c  4813              LDR      r0,|L1.636|
00022e  7800              LDRB     r0,[r0,#0]  ; ms1_cnt
000230  1c40              ADDS     r0,r0,#1
000232  4912              LDR      r1,|L1.636|
000234  7008              STRB     r0,[r1,#0]
;;;240    		if(ms1_cnt == 2)
000236  4608              MOV      r0,r1
000238  7800              LDRB     r0,[r0,#0]  ; ms1_cnt
00023a  2802              CMP      r0,#2
00023c  d104              BNE      |L1.584|
;;;241    		{
;;;242    			ms1_cnt = 0;
00023e  2000              MOVS     r0,#0
000240  7008              STRB     r0,[r1,#0]
;;;243    			FLAG_ATT = 1;
000242  2001              MOVS     r0,#1
000244  490e              LDR      r1,|L1.640|
000246  7008              STRB     r0,[r1,#0]
                  |L1.584|
;;;244    		}
;;;245    		Data_Exchange();
000248  f7fffffe          BL       Data_Exchange
                  |L1.588|
;;;246    	}
;;;247    }
00024c  bd10              POP      {r4,pc}
;;;248    
                          ENDP

00024e  0000              DCW      0x0000
                  |L1.592|
                          DCD      0x40013800
                  |L1.596|
000254  256300            DCB      "%c",0
000257  00                DCB      0
                  |L1.600|
                          DCD      0x40020058
                  |L1.604|
                          DCD      Pre_Tim
                  |L1.608|
                          DCD      Dlt_Tim
                  |L1.612|
                          DCD      Att_Angle
                  |L1.616|
                          DCD      ReadBuffer
                  |L1.620|
                          DCD      0x40e00000
                  |L1.624|
                          DCD      0x40668000
                  |L1.628|
                          DCD      Gyr
                  |L1.632|
                          DCD      TIM2_IRQCNT
                  |L1.636|
                          DCD      ms1_cnt
                  |L1.640|
                          DCD      FLAG_ATT

                          AREA ||.data||, DATA, ALIGN=3

                  ms1_cnt
000000  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  Roll
                          %        8
                  Pitch
                          %        8
                  Yaw
                          %        8
                  Dlt_Tim
                          DCD      0x00000000
                  Pre_Tim
                          DCD      0x00000000
