; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\output\time.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\time.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\CMSIS -I..\Lib\inc -I..\User -I"E:\Program Files\keil for arm4.7\ARM\RV31\INC" -I"E:\Program Files\keil for arm4.7\ARM\CMSIS\Include" -I"E:\Program Files\keil for arm4.7\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\output\time.crf ..\BSP\Time.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;1585    */
;;;1586   static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;1587   {
;;;1588     if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da07              BGE      |L1.22|
;;;1589       SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
000006  070a              LSLS     r2,r1,#28
000008  0e14              LSRS     r4,r2,#24
00000a  4a4d              LDR      r2,|L1.320|
00000c  f000030f          AND      r3,r0,#0xf
000010  1f1b              SUBS     r3,r3,#4
000012  54d4              STRB     r4,[r2,r3]
000014  e003              B        |L1.30|
                  |L1.22|
;;;1590     else {
;;;1591       NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
000016  070a              LSLS     r2,r1,#28
000018  0e13              LSRS     r3,r2,#24
00001a  4a4a              LDR      r2,|L1.324|
00001c  5413              STRB     r3,[r2,r0]
                  |L1.30|
;;;1592   }
00001e  bd10              POP      {r4,pc}
;;;1593   
                          ENDP

                  time_init PROC
;;;12     // 初始化时间
;;;13     void time_init(void)
000020  e92d41f0          PUSH     {r4-r8,lr}
;;;14     {
;;;15         time.msPeriod = 0;
000024  2000              MOVS     r0,#0
000026  4948              LDR      r1,|L1.328|
000028  6008              STR      r0,[r1,#0]  ; time
;;;16         time.ticksPerUs = SystemCoreClock / 1e6;
00002a  4848              LDR      r0,|L1.332|
00002c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00002e  f7fffffe          BL       __aeabi_ui2d
000032  4606              MOV      r6,r0
000034  2200              MOVS     r2,#0
000036  4b46              LDR      r3,|L1.336|
000038  f7fffffe          BL       __aeabi_ddiv
00003c  4604              MOV      r4,r0
00003e  f7fffffe          BL       __aeabi_d2uiz
000042  4941              LDR      r1,|L1.328|
000044  6048              STR      r0,[r1,#4]  ; time
;;;17         time.ticksPerMs = SystemCoreClock / 1e3;
000046  4841              LDR      r0,|L1.332|
000048  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00004a  f7fffffe          BL       __aeabi_ui2d
00004e  4606              MOV      r6,r0
000050  2200              MOVS     r2,#0
000052  4b40              LDR      r3,|L1.340|
000054  f7fffffe          BL       __aeabi_ddiv
000058  4604              MOV      r4,r0
00005a  f7fffffe          BL       __aeabi_d2uiz
00005e  493a              LDR      r1,|L1.328|
000060  6088              STR      r0,[r1,#8]  ; time
;;;18         time.msPerPeriod = 10;
000062  200a              MOVS     r0,#0xa
000064  60c8              STR      r0,[r1,#0xc]  ; time
;;;19         SysTick_Config(SystemCoreClock/(1000/time.msPerPeriod));
000066  4608              MOV      r0,r1
000068  68c0              LDR      r0,[r0,#0xc]  ; time
00006a  f44f717a          MOV      r1,#0x3e8
00006e  fbb1f0f0          UDIV     r0,r1,r0
000072  4936              LDR      r1,|L1.332|
000074  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000076  fbb1f4f0          UDIV     r4,r1,r0
00007a  f1b47f80          CMP      r4,#0x1000000
00007e  d300              BCC      |L1.130|
000080  e011              B        |L1.166|
                  |L1.130|
000082  f024407f          BIC      r0,r4,#0xff000000
000086  1e40              SUBS     r0,r0,#1
000088  f04f21e0          MOV      r1,#0xe000e000
00008c  6148              STR      r0,[r1,#0x14]
00008e  210f              MOVS     r1,#0xf
000090  f04f30ff          MOV      r0,#0xffffffff
000094  f7fffffe          BL       NVIC_SetPriority
000098  2000              MOVS     r0,#0
00009a  f04f21e0          MOV      r1,#0xe000e000
00009e  6188              STR      r0,[r1,#0x18]
0000a0  2007              MOVS     r0,#7
0000a2  6108              STR      r0,[r1,#0x10]
0000a4  bf00              NOP      
                  |L1.166|
;;;20     //		SysTick->CTRL &= ~ SysTick_CTRL_ENABLE_Msk;
;;;21     	NVIC_SetPriority(SysTick_IRQn,0);
0000a6  2100              MOVS     r1,#0
0000a8  1e48              SUBS     r0,r1,#1
0000aa  f7fffffe          BL       NVIC_SetPriority
;;;22     }
0000ae  e8bd81f0          POP      {r4-r8,pc}
;;;23     
                          ENDP

                  SysTick_Handler PROC
;;;24     // SysTick中断
;;;25     void SysTick_Handler(void)
0000b2  4825              LDR      r0,|L1.328|
;;;26     {
;;;27         time.msPeriod += time.msPerPeriod;
0000b4  6800              LDR      r0,[r0,#0]  ; time
0000b6  4924              LDR      r1,|L1.328|
0000b8  68c9              LDR      r1,[r1,#0xc]  ; time
0000ba  4408              ADD      r0,r0,r1
0000bc  4922              LDR      r1,|L1.328|
0000be  6008              STR      r0,[r1,#0]  ; time
;;;28     }
0000c0  4770              BX       lr
;;;29     
                          ENDP

                  time_nowUs PROC
;;;30     // 获取当前时间，us?
;;;31     uint64_t time_nowUs(void)
0000c2  f04f20e0          MOV      r0,#0xe000e000
;;;32     {
;;;33         return time.msPeriod * (uint64_t)1000 + (SysTick->LOAD - SysTick->VAL) / time.ticksPerUs;
0000c6  6940              LDR      r0,[r0,#0x14]
0000c8  f04f21e0          MOV      r1,#0xe000e000
0000cc  6989              LDR      r1,[r1,#0x18]
0000ce  1a40              SUBS     r0,r0,r1
0000d0  491d              LDR      r1,|L1.328|
0000d2  6849              LDR      r1,[r1,#4]  ; time
0000d4  fbb0f0f1          UDIV     r0,r0,r1
0000d8  4a1b              LDR      r2,|L1.328|
0000da  6812              LDR      r2,[r2,#0]  ; time
0000dc  f44f737a          MOV      r3,#0x3e8
0000e0  fba23203          UMULL    r3,r2,r2,r3
0000e4  18c0              ADDS     r0,r0,r3
0000e6  f1420100          ADC      r1,r2,#0
;;;34     }
0000ea  4770              BX       lr
;;;35     
                          ENDP

                  time_nowMs PROC
;;;36     // 获取当前时间,ms?
;;;37     uint32_t time_nowMs(void)
0000ec  f04f20e0          MOV      r0,#0xe000e000
;;;38     {
;;;39         return time.msPeriod + (SysTick->LOAD - SysTick->VAL) / time.ticksPerMs;
0000f0  6940              LDR      r0,[r0,#0x14]
0000f2  f04f21e0          MOV      r1,#0xe000e000
0000f6  6989              LDR      r1,[r1,#0x18]
0000f8  1a40              SUBS     r0,r0,r1
0000fa  4913              LDR      r1,|L1.328|
0000fc  6889              LDR      r1,[r1,#8]  ; time
0000fe  fbb0f0f1          UDIV     r0,r0,r1
000102  4911              LDR      r1,|L1.328|
000104  6809              LDR      r1,[r1,#0]  ; time
000106  4408              ADD      r0,r0,r1
;;;40     }
000108  4770              BX       lr
;;;41     
                          ENDP

                  time_waitUs PROC
;;;42     // 延时delay us,delay>=4才准确
;;;43     void time_waitUs(uint32_t delay)
00010a  b570              PUSH     {r4-r6,lr}
;;;44     {
00010c  4604              MOV      r4,r0
;;;45         uint64_t target = time_nowUs() + delay - 2;
00010e  f7fffffe          BL       time_nowUs
000112  1902              ADDS     r2,r0,r4
000114  f1410000          ADC      r0,r1,#0
000118  1e95              SUBS     r5,r2,#2
00011a  f1600600          SBC      r6,r0,#0
;;;46         while(time_nowUs() <= target)
00011e  bf00              NOP      
                  |L1.288|
000120  f7fffffe          BL       time_nowUs
000124  1a28              SUBS     r0,r5,r0
000126  eb760001          SBCS     r0,r6,r1
00012a  d2f9              BCS      |L1.288|
;;;47             ; 
;;;48     }
00012c  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP

                  time_waitMs PROC
;;;50     // 延时delay ms。
;;;51     void time_waitMs(uint32_t delay)
00012e  b510              PUSH     {r4,lr}
;;;52     {
000130  4604              MOV      r4,r0
;;;53         time_waitUs(delay * 1000);
000132  f44f717a          MOV      r1,#0x3e8
000136  fb04f001          MUL      r0,r4,r1
00013a  f7fffffe          BL       time_waitUs
;;;54     }
00013e  bd10              POP      {r4,pc}
                          ENDP

                  |L1.320|
                          DCD      0xe000ed18
                  |L1.324|
                          DCD      0xe000e400
                  |L1.328|
                          DCD      time
                  |L1.332|
                          DCD      SystemCoreClock
                  |L1.336|
                          DCD      0x412e8480
                  |L1.340|
                          DCD      0x408f4000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  time
                          %        16
