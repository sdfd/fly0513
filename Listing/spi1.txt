; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\output\spi1.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\spi1.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\CMSIS -I..\Lib\inc -I..\User -I"E:\Program files\keil-arm\ARM\RV31\INC" -I"E:\Program files\keil-arm\ARM\CMSIS\Include" -I"E:\Program files\keil-arm\ARM\Inc\ST\STM32F10x" -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\output\spi1.crf ..\BSP\SPI1.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Spi1_Init PROC
;;;13     #endif
;;;2      void Spi1_Init(void)
000000  b500              PUSH     {lr}
;;;3      {
000002  b087              SUB      sp,sp,#0x1c
;;;4      	SPI_InitTypeDef SPI_InitStructure; 
;;;5      	GPIO_InitTypeDef GPIO_InitStructure;
;;;6      	
;;;7      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;8      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2080              MOVS     r0,#0x80
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;9      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
000014  2101              MOVS     r1,#1
000016  0308              LSLS     r0,r1,#12
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;10     	 
;;;11     	/*配置 SPI_NRF_SPI的 SCK,MISO,MOSI引脚，GPIOA^5,GPIOA^6,GPIOA^7 */ 
;;;12     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7; 
00001c  20e0              MOVS     r0,#0xe0
00001e  f8ad0004          STRH     r0,[sp,#4]
;;;13     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz; 
000022  2001              MOVS     r0,#1
000024  f88d0006          STRB     r0,[sp,#6]
;;;14     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //复用功能 
000028  2018              MOVS     r0,#0x18
00002a  f88d0007          STRB     r0,[sp,#7]
;;;15     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00002e  a901              ADD      r1,sp,#4
000030  482e              LDR      r0,|L1.236|
000032  f7fffffe          BL       GPIO_Init
;;;16     	/*配置SPI_NRF_SPI的CE引脚，和SPI_NRF_SPI的 CSN 引脚:*/
;;;17     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0; 
000036  2001              MOVS     r0,#1
000038  f8ad0004          STRH     r0,[sp,#4]
;;;18     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz; 
00003c  f88d0006          STRB     r0,[sp,#6]
;;;19     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 
000040  2010              MOVS     r0,#0x10
000042  f88d0007          STRB     r0,[sp,#7]
;;;20     	GPIO_Init(GPIOF, &GPIO_InitStructure);
000046  a901              ADD      r1,sp,#4
000048  4829              LDR      r0,|L1.240|
00004a  f7fffffe          BL       GPIO_Init
;;;21     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; 
00004e  2010              MOVS     r0,#0x10
000050  f8ad0004          STRH     r0,[sp,#4]
;;;22     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz; 
000054  2001              MOVS     r0,#1
000056  f88d0006          STRB     r0,[sp,#6]
;;;23     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 
00005a  2010              MOVS     r0,#0x10
00005c  f88d0007          STRB     r0,[sp,#7]
;;;24     	GPIO_Init(GPIOA, &GPIO_InitStructure);	
000060  a901              ADD      r1,sp,#4
000062  4822              LDR      r0,|L1.236|
000064  f7fffffe          BL       GPIO_Init
;;;25     	
;;;26     	SPI_CSN_H();
000068  2110              MOVS     r1,#0x10
00006a  4820              LDR      r0,|L1.236|
00006c  f7fffffe          BL       GPIO_SetBits
;;;27     	
;;;28     	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //双线全双工 
000070  2000              MOVS     r0,#0
000072  f8ad0008          STRH     r0,[sp,#8]
;;;29     	SPI_InitStructure.SPI_Mode = SPI_Mode_Master; //主模式 
000076  f44f7082          MOV      r0,#0x104
00007a  f8ad000a          STRH     r0,[sp,#0xa]
;;;30     	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b; //数据大小8位 
00007e  2000              MOVS     r0,#0
000080  f8ad000c          STRH     r0,[sp,#0xc]
;;;31     	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low; //时钟极性，空闲时为低 
000084  f8ad000e          STRH     r0,[sp,#0xe]
;;;32     	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge; //第1个边沿有效，上升沿为采样时刻 
000088  f8ad0010          STRH     r0,[sp,#0x10]
;;;33     	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft; //NSS信号由软件产生 
00008c  f44f7000          MOV      r0,#0x200
000090  f8ad0012          STRH     r0,[sp,#0x12]
;;;34     	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8; //8分频，9MHz 
000094  2010              MOVS     r0,#0x10
000096  f8ad0014          STRH     r0,[sp,#0x14]
;;;35     	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB; //高位在前 
00009a  2000              MOVS     r0,#0
00009c  f8ad0016          STRH     r0,[sp,#0x16]
;;;36     	SPI_InitStructure.SPI_CRCPolynomial = 7; 
0000a0  2007              MOVS     r0,#7
0000a2  f8ad0018          STRH     r0,[sp,#0x18]
;;;37     	SPI_Init(SPI1, &SPI_InitStructure); 
0000a6  a902              ADD      r1,sp,#8
0000a8  4812              LDR      r0,|L1.244|
0000aa  f7fffffe          BL       SPI_Init
;;;38     	/* Enable SPI1 */ 
;;;39     	SPI_Cmd(SPI1, ENABLE);
0000ae  2101              MOVS     r1,#1
0000b0  4810              LDR      r0,|L1.244|
0000b2  f7fffffe          BL       SPI_Cmd
;;;40     }
0000b6  b007              ADD      sp,sp,#0x1c
0000b8  bd00              POP      {pc}
;;;41     u8 Spi_RW(u8 dat) 
                          ENDP

                  Spi_RW PROC
0000ba  b510              PUSH     {r4,lr}
;;;42     { 
0000bc  4604              MOV      r4,r0
;;;43     	/* 当 SPI发送缓冲器非空时等待 */ 
;;;44     	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET); 
0000be  bf00              NOP      
                  |L1.192|
0000c0  2102              MOVS     r1,#2
0000c2  480c              LDR      r0,|L1.244|
0000c4  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000c8  2800              CMP      r0,#0
0000ca  d0f9              BEQ      |L1.192|
;;;45     	/* 通过 SPI2发送一字节数据 */ 
;;;46     	SPI_I2S_SendData(SPI1, dat); 
0000cc  4621              MOV      r1,r4
0000ce  4809              LDR      r0,|L1.244|
0000d0  f7fffffe          BL       SPI_I2S_SendData
;;;47     	/* 当SPI接收缓冲器为空时等待 */ 
;;;48     	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET); 
0000d4  bf00              NOP      
                  |L1.214|
0000d6  2101              MOVS     r1,#1
0000d8  4806              LDR      r0,|L1.244|
0000da  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000de  2800              CMP      r0,#0
0000e0  d0f9              BEQ      |L1.214|
;;;49     	/* Return the byte read from the SPI bus */ 
;;;50     	return SPI_I2S_ReceiveData(SPI1); 
0000e2  4804              LDR      r0,|L1.244|
0000e4  f7fffffe          BL       SPI_I2S_ReceiveData
0000e8  b2c0              UXTB     r0,r0
;;;51     }
0000ea  bd10              POP      {r4,pc}
                          ENDP

                  |L1.236|
                          DCD      0x40010800
                  |L1.240|
                          DCD      0x40011c00
                  |L1.244|
                          DCD      0x40013000
